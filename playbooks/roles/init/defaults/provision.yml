provision_header: |
        ##############################################################################
        ## Provision {{ name }}
        ## This role executes much of the needed functionality to provision an
        ## application using an Ansible Playbook Bundle.  Included below
        ## are some sample resources for getting started deploying an application
        ## to OpenShift.
        ##############################################################################

provision_deploymentconfig: |
        ##############################################################################
        ## An OpenShift Origin deployment configuration provides a replication
        ## controller, spins up pods, and also provides the ability to transition from
        ## one deployment of an image to a new one.
        ## https://docs.openshift.org/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations
        ##############################################################################
        #- name: create deployment config
        #  openshift_v1_deployment_config:
        #    name: {{ name }}
        #    namespace: '{{ namespace }}'
        #    labels:
        #      app: {{ name }}
        #      service: {{ name }}
        #    replicas: 1
        #    selector:
        #      app: {{ name }}
        #      service: {{ name }}
        #    spec_template_metadata_labels:
        #      app: {{ name }}
        #      service: {{ name }}
        #    containers:
        #    - env:
        #      image: {{ image }}
        #      name: {{ name }}
        #      ports:
        #      - container_port: 80
        #        protocol: TCP

provision_service: |
        ##############################################################################
        ## A Kubernetes service serves as an internal load balancer.  It identifies a
        ## set of replicated pods in order to proxy the connections it receives to them.
        ## https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html#services
        ##############################################################################
        #- name: create {{ name }} service
        #  k8s_v1_service:
        #    name: {{ name }}
        #    namespace: '{{ namespace }}'
        #    labels:
        #      app: {{ name }}
        #      service: {{ name }}
        #    selector:
        #      app: {{ name }}
        #      service: {{ name }}
        #    ports:
        #      - name: web
        #        port: 80
        #        target_port: 80

provision_route: |
        ##############################################################################
        ## An OpenShift Origin route exposes a service at a host name, so that external
        ## clients can reach it by name. Each route consists of a name, a service
        ## selector, and an optional security configuration.
        ## https://docs.openshift.org/latest/architecture/core_concepts/routes.html
        ##############################################################################
        #- name: create {{ name }} route
        #  openshift_v1_route:
        #    name: {{ name }}
        #    namespace: '{{ namespace }}'
        #    spec_port_target_port: web
        #    labels:
        #      app: {{ name }}
        #      service: {{ name }}
        #    to_name: {{ name }}

provision_encode_bindcreds: |
        ##############################################################################
        ## Bindable services must make credentials available to the Ansible Service
        ## Broker during the provision stage.  They will later be made available to
        ## applications after a binding is created.
        ## https://github.com/kubernetes-incubator/service-catalog/blob/master/docs/design.md#using-a-service-instance
        ##############################################################################
        #- name: encode bind credentials
        #  asb_encode_binding:
        #    fields:
        #      ENV_VAR_1: value1
        #      ENV_VAR_2: value2
